{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","evento","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAGzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAOC,iBAEJJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBY,SAACP,GACrBF,EAAcE,EAAOQ,OAAOF,a,+BCTvBG,EAAO,uCAAE,WAAMC,GAAN,uBAAAC,EAAA,6DAEZC,EAFY,iDAEoCC,UAAUH,GAF9C,+DAGMI,MAAMF,GAHZ,cAGZG,EAHY,gBAIGA,EAAUC,OAJb,uBAIXC,EAJW,EAIXA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAI1Ca,QAAQC,IAAIR,GAdM,kBAgBXA,GAhBW,4CAAF,sDCEPS,EAAc,SAAC,GAAsB,IAArBN,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OAFAa,QAAQC,IAAIL,EAAIC,EAAOV,GAGnB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAMjB,EAAKkB,IAAKR,IACrB,4BAAIA,QCLHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAErB,ECHwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAU,WACN1B,EAASC,GACJ0B,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACTjB,KAAMoB,EACNL,SAAS,MAEV,UAGZ,CAACtB,IAEGuB,EDhBwBM,CAAa7B,GAAhCa,EAAZ,EAAON,KAAae,EAApB,EAAoBA,QAEpB,OACI,qCACI,oBAAIJ,UAAW,oCAAf,SAAqDlB,IAEpDsB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEX,qBAAKA,UAAU,YAAf,SACIL,EAAOJ,KAAK,SAAAC,GAAG,OACZ,aADmB,CAClB,EAAD,eAEIA,GADCA,EAAIC,aEZhBmB,EAAe,WAExB,MAAoC5C,mBAAS,CAAC,KAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEK8C,EAAWtB,KAAI,SAAAT,GAAQ,OAClB,aADuB,CACtB,EAAD,CAEEA,SAAUA,GADLA,Y,MCb7BgC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8ee584bf.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n\r\n    const [inputValue, setinputValue] = useState('')\r\n\r\n    const handleInputChange=(evento) =>{ //escribe el nuevo valor\r\n        setinputValue(evento.target.value);//setea con lo nuevo que se escribe\r\n    }\r\n\r\n    const handleSubmit = (evento) =>{\r\n        evento.preventDefault(); //evita el refresh de la pagina\r\n\r\n        if(inputValue.trim().length > 2) { //con trim() no se permite que se guarden los espacios em blanco\r\n            setCategories(cats => [inputValue,...cats,]); //comunica con GifExpertApp\r\n            setinputValue('');  //resetea el espacio en blanco para volver a escribir\r\n        }\r\n    }\r\n    \r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}> \r\n            <input                      //CAJA DONDE SE ESCRIBE\r\n                type=\"text\"     //tipo: texto\r\n                value={inputValue}  //muestra el valor pro defecto, en este caso 'escribe algo..'\r\n                onChange={handleInputChange}    //muestra el nuevo valor\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n        setCategories: PropTypes.func.isRequired\r\n}","export const getGifs= async(category) =>{      \r\n\r\n    const url =`https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=UYESX9QejwCQK7lrzvrYhtrNe8v6Mxdi`\r\n    const respuesta = await fetch(url);//busca con FETCH lo que contenga el url que se le pasa en formato json\r\n    const {data} = await respuesta.json(); //guarda los gifs en una constante desestructurada data. \r\n                                            //data esta dentro de data, por eso la desestructuracion\r\n    const gifs = data.map( img => { //ciclo que retorna un nuevo objeto con los datos de los gifs\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    })\r\n\r\n    console.log(gifs);\r\n    //3. GUARDA LOS OBJETOS EN LA LISTA DE useEstate\r\n    return gifs;\r\n    \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    console.log(id, title, url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src ={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className= \"animate__animated animate__fadeIn\">{ category }</h3>\r\n            {/*loading ? 'Cargando...' : 'Data Cargada'*/}\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n            \r\n            {<div className=\"card-grid\">\r\n                {images.map( img =>  ( //funciona como ciclo for e imprime todos los strings de la lista\r\n                    <GifGridItem   //5. UTILIZANDO EL NUEVO COMPONENTE GigGirdItem MOSTRAMOS LAS IMAGENES Y SUS TITULOS\r\n                    key={img.id}\r\n                    {...img}\r\n                    />\r\n                ))\r\n                }\r\n            </div>}\r\n        </>\r\n    )     \r\n}\r\n\r\n//2. USO MI FUNCION\r\n    /*useEffect( ()=> {//Permite ejecutar cierto codigo de manera condicional\r\n        getGifs(category).then(setimages)\r\n    }, [category]) //2do argumento es arreglo de dependencias. Si no tiene dependencia, el ussEffect se dispara una sola vez\r\n    */\r\n    \r\n    //1.CREO MI FUNCION\r\n    /*const getGifs= async() =>{      \r\n\r\n        const url =`https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=UYESX9QejwCQK7lrzvrYhtrNe8v6Mxdi`\r\n        const respuesta = await fetch(url);//busca con FETCH lo que contenga el url que se le pasa en formato json\r\n        const {data} = await respuesta.json(); //guarda los gifs en una constante desestructurada data. \r\n                                                //data esta dentro de data, por eso la desestructuracion\r\n        const gifs = data.map( img => { //ciclo que retorna un nuevo objeto con los datos de los gifs\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url,\r\n            }\r\n        })\r\n\r\n        console.log(gifs);\r\n        //3. GUARDA LOS OBJETOS EN LA LISTA DE useEstate\r\n        setimages(gifs); \r\n    }*/","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(()=>{\r\n        getGifs( category )\r\n            .then(imgs => {\r\n                setTimeout(() => {\r\n                    setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                    });\r\n                }, 500);\r\n        })\r\n\r\n    }, [category]);\r\n\r\n    return state;   //{data: [], loading: true}\r\n}","//Functional Component\r\nimport React, {useState} from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['']);\r\n    \r\n    return (\r\n        <> \r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n            <ol>\r\n                {\r\n                 categories.map(category => (//funciona como ciclo for e imprime todos los strings de la lista\r\n                      <GifGrid \r\n                        key={category} \r\n                        category={category} />\r\n                 ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);"],"sourceRoot":""}